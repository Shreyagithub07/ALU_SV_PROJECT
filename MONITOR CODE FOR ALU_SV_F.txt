//MONITOR CODE FOR ALU_SV

`include "defines.sv"
class alu_monitor;
  alu_transaction mon_trans;
  //Mailbox for monitor to scoreboard connection
    mailbox #(alu_transaction) mbx_ms;
  //Virtual interface with driver modport and it's instance
    virtual alu_if.MON vif;

covergroup cg;
    ERR      : coverpoint mon_trans.ERR { bins err[] = {0, 1}; }
    COUT     : coverpoint mon_trans.COUT { bins cout[] = {0, 1}; }
    OFLOW    : coverpoint mon_trans.OFLOW { bins oflow[] = {0, 1}; }
    E        : coverpoint mon_trans.E { bins e[] = {0, 1}; }
    G        : coverpoint mon_trans.G { bins g[] = {0, 1}; }
    L        : coverpoint mon_trans.L { bins l[] = {0, 1}; }
    RES      : coverpoint mon_trans.RES { bins res[] = {[0:(1<<(`n+1))-1]}; }
  endgroup


//METHODS

  function new( virtual alu_if.MON vif,
                mailbox #(alu_transaction) mbx_ms);
    this.vif=vif;
    this.mbx_ms=mbx_ms;
   //Creating the object for covergroup
    cg=new();
  endfunction

  //Task to collect the output from the interface
  task start();
   repeat(4) @(vif.mon_cb);
    for(int i=0;i<`no_of_trans;i++)
      begin
        mon_trans=new();
        if(vif.mon_cb.MODE==1&&(vif.mon_cb.CMD inside{9,10}))
        begin
        repeat(2) @(vif.mon_cb);
             begin
              mon_trans.RES=vif.mon_cb.RES;
              mon_trans.COUT=vif.mon_cb.COUT;
              mon_trans.OFLOW=vif.mon_cb.OFLOW;
              mon_trans.G=vif.mon_cb.G;
              mon_trans.L=vif.mon_cb.L;
              mon_trans.E=vif.mon_cb.E;
              mon_trans.ERR=vif.mon_cb.ERR;
              end

              $display("MONITOR PASSING THE DATA TO SCOREBOARD opa = %d, opb=%d, res=%d, oflow=%d, cout=%d,g=%d,l=%d, e=%d time=%d",mon_trans.OPA,mon_trans.OPB,mon_trans.RES,mon_trans.COUT,mon_trans.OFLOW,mon_trans.G,mon_trans.L,mon_trans.E,$time);

             end
            else
            begin
            repeat(1) @(vif.mon_cb)
             begin
              mon_trans.RES=vif.mon_cb.RES;
              mon_trans.COUT=vif.mon_cb.COUT;
              mon_trans.OFLOW=vif.mon_cb.OFLOW;
              mon_trans.G=vif.mon_cb.G;
              mon_trans.L=vif.mon_cb.L;
              mon_trans.E=vif.mon_cb.E;
              mon_trans.ERR=vif.mon_cb.ERR;
             end
      $display("MONITOR PASSING THE DATA TO SCOREBOARD opa = %d, opb=%d, res=%d, oflow=%d, cout=%d,g=%d,l=%d, e=%d time=%d",mon_trans.OPA,mon_trans.OPB,
mon_trans.RES,mon_trans.COUT,mon_trans.OFLOW,mon_trans.G,mon_trans.L,mon_trans.E,$time);
             end
       // $display("MONITOR PASSING THE DATA TO SCOREBOARD opa = %d, opb=%d, res=%d, oflow=%d, cout=%d,g=%d,l=%d, e=%d time=%d",mon_trans.OPA,mon_trans.O//PB,mon_trans.RES,mon_trans.COUT,mon_trans.OFLOW,mon_trans.G,mon_trans.L,mon_trans.E,$time);
        //Putting the collected ouputs to mailbox
        mbx_ms.put(mon_trans);
        //Sampling the covergroup
          cg.sample();
        $display("OUTPUT FUNCTIONAL COVERAGE = %0d", cg.get_coverage());
        repeat(1) @(vif.mon_cb);
      end
  endtask
endclass



