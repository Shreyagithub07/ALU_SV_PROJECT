
interface alu_if(input bit CLK,RST);
logic[`n-1:0] OPA,OPB;
logic[3:0] CMD;
logic[`n:0] RES;
logic[1:0] INP_VALID;
logic ERR,COUT,G,L,E,OFLOW;
logic CIN,CE,MODE;

property ppt_reset;
@(posedge CLK) RST |=> ##[1:5] (RES === 9'bzzzzzzzz && ERR === 1'bz && E === 1'bz && G === 1'bz && L === 1'bz && COUT === 1'bz && OFLOW === 1'bz)
endproperty

assert property(ppt_reset)
   $display("RST assertion PASSED at time %0t", $time);
  else
   $info("RST assertion FAILED @ time %0t", $time);

/*
  // CMD out of range
   assert property (@(posedge CLK) (MODE && CMD > 10) |=> ERR)
   else $info("CMD INVALID ERR NOT RAISED");

  // CMD out of range logical
  assert property (@(posedge CLK) (!MODE && CMD > 13) |=> ERR)
  else $info("CMD INVALID ERR NOT RAISED");
 */
  //  INP_VALID 00 case
  assert property (@(posedge CLK) (INP_VALID == 2'b00) |=> ERR )
  else $info("ERROR NOT raised");


 // CE assertion
  property ppt_clock_enable;
    @(posedge CLK) disable iff(RST) !CE |-> ##1 ($stable(RES) && $stable(COUT) && $stable(OFLOW) && $stable(G) && $stable(L) && $stable(E) && $stable(ERR));
  endproperty
  assert property(ppt_clock_enable)
  else $info("Clock enable assertion failed at time %0t", $time);


clocking drv_cb@(posedge CLK);
default input #0 output #0;
input RST;
output CIN,CE,MODE,CMD,OPB,OPA,INP_VALID;
endclocking

clocking mon_cb@(posedge CLK);
default input #0 output #0;
input ERR,RES,COUT,G,L,E,OFLOW,CMD,MODE;

endclocking

clocking ref_cb@(posedge CLK);
default input #0 output #0;
input RST;
endclocking

modport DRV(clocking drv_cb);
modport MON(clocking mon_cb);
modport REF_SB(clocking ref_cb);
endinterface

